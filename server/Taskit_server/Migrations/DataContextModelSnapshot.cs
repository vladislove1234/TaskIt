// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taskit_server.Db;

namespace Taskit_server.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Taskit_server.Model.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TaskColumnId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskColumnId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TeamId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Taskit_server.Model.Entities.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ColumnId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ColumnId");

                    b.HasIndex("TeamId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("Taskit_server.Model.Entities.TaskColumn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TaskColumn");
                });

            modelBuilder.Entity("Taskit_server.Model.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Taskit_server.Model.Entities.UserModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<long>("TeamsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("TeamsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("Taskit_server.Model.Entities.Role", b =>
                {
                    b.HasOne("Taskit_server.Model.Entities.TaskColumn", null)
                        .WithMany("Roles")
                        .HasForeignKey("TaskColumnId");

                    b.HasOne("Taskit_server.Model.Entities.Task", null)
                        .WithMany("Roles")
                        .HasForeignKey("TaskId");

                    b.HasOne("Taskit_server.Model.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Taskit_server.Model.Entities.Task", b =>
                {
                    b.HasOne("Taskit_server.Model.Entities.UserModels.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Taskit_server.Model.Entities.TaskColumn", "Column")
                        .WithMany("Tasks")
                        .HasForeignKey("ColumnId");

                    b.HasOne("Taskit_server.Model.Entities.Team", null)
                        .WithMany("Tasks")
                        .HasForeignKey("TeamId");

                    b.Navigation("Author");

                    b.Navigation("Column");
                });

            modelBuilder.Entity("Taskit_server.Model.Entities.TaskColumn", b =>
                {
                    b.HasOne("Taskit_server.Model.Entities.Team", null)
                        .WithMany("TaskColumns")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Taskit_server.Model.Entities.UserModels.User", b =>
                {
                    b.HasOne("Taskit_server.Model.Entities.Task", null)
                        .WithMany("Users")
                        .HasForeignKey("TaskId");

                    b.HasOne("Taskit_server.Model.Entities.UserModels.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("Taskit_server.Model.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taskit_server.Model.Entities.UserModels.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Taskit_server.Model.Entities.Task", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Taskit_server.Model.Entities.TaskColumn", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Taskit_server.Model.Entities.Team", b =>
                {
                    b.Navigation("TaskColumns");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Taskit_server.Model.Entities.UserModels.User", b =>
                {
                    b.Navigation("Friends");
                });
#pragma warning restore 612, 618
        }
    }
}
